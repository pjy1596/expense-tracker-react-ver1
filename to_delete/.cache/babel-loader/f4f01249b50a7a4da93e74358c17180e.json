{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjy15\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uBC15\\uC900\\uC601\\\\Computer\\\\reactexpensetracker\\\\src\\\\context\\\\GlobalState.js\";\n// https://css-tricks.com/getting-to-know-the-usereducer-react-hook/\n// https://www.robinwieruch.de/react-usecontext-hook\n// 간단히 useReducer는 useState처럼 state를 수정함. 다만 단순한 거 말고 복잡한 거 쓸 때 추천. state 요소끼리 연관되어 있을 때\n// 간단히 context는 redux와 같은 역할. component 속 여러 component들 옛날처럼 pass in 해서 연결하고 안해도 되게 해줌\nimport React, { useReducer, createContext } from \"react\";\nimport Reducer from \"./Reducer\";\nconst initialState = {\n  transactions: [{\n    id: 1,\n    text: \"Flower\",\n    amount: -20\n  }, {\n    id: 2,\n    text: \"Salary\",\n    amount: 300\n  }, {\n    id: 3,\n    text: \"Book\",\n    amount: -10\n  }, {\n    id: 4,\n    text: \"Camera\",\n    amount: 150\n  }]\n};\nexport const GlobalContext = createContext(initialState);\nexport const GlobalProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/pjy15/OneDrive/바탕 화면/박준영/Computer/reactexpensetracker/src/context/GlobalState.js"],"names":["React","useReducer","createContext","Reducer","initialState","transactions","id","text","amount","GlobalContext","GlobalProvider","children","state","dispatch"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,CACZ;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE,CAAC;AAAlC,GADY,EAEZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE;AAAjC,GAFY,EAGZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,MAAf;AAAuBC,IAAAA,MAAM,EAAE,CAAC;AAAhC,GAHY,EAIZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,QAAf;AAAyBC,IAAAA,MAAM,EAAE;AAAjC,GAJY;AADK,CAArB;AASA,OAAO,MAAMC,aAAa,GAAGP,aAAa,CAACE,YAAD,CAAnC;AACP,OAAO,MAAMM,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,UAAU,CAACE,OAAD,EAAUC,YAAV,CAApC;AACA,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEC,MAAAA,YAAY,EAAEO,KAAK,CAACP;AAAtB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,QADH,CADF;AAKD,CAPM","sourcesContent":["// https://css-tricks.com/getting-to-know-the-usereducer-react-hook/\r\n// https://www.robinwieruch.de/react-usecontext-hook\r\n// 간단히 useReducer는 useState처럼 state를 수정함. 다만 단순한 거 말고 복잡한 거 쓸 때 추천. state 요소끼리 연관되어 있을 때\r\n// 간단히 context는 redux와 같은 역할. component 속 여러 component들 옛날처럼 pass in 해서 연결하고 안해도 되게 해줌\r\nimport React, { useReducer, createContext } from \"react\";\r\nimport Reducer from \"./Reducer\";\r\nconst initialState = {\r\n  transactions: [\r\n    { id: 1, text: \"Flower\", amount: -20 },\r\n    { id: 2, text: \"Salary\", amount: 300 },\r\n    { id: 3, text: \"Book\", amount: -10 },\r\n    { id: 4, text: \"Camera\", amount: 150 },\r\n  ],\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n  return (\r\n    <GlobalContext.Provider value={{ transactions: state.transactions }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}