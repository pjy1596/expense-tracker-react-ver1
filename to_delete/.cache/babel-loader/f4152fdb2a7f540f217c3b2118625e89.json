{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pjy15\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\\\uBC15\\uC900\\uC601\\\\Computer\\\\reactexpensetracker\\\\src\\\\context\\\\GlobalState.js\";\n// https://css-tricks.com/getting-to-know-the-usereducer-react-hook/\n// https://www.robinwieruch.de/react-usecontext-hook\n// 간단히 useReducer는 useState처럼 state를 수정함. 다만 단순한 거 말고 복잡한 거 쓸 때 추천. state 요소끼리 연관되어 있을 때\n// 간단히 context는 redux와 같은 역할. component 속 여러 component들 옛날처럼 pass in 해서 연결하고 안해도 되게 해줌\nimport React, { useReducer, createContext } from \"react\";\nimport Reducer from \"./Reducer\";\nconst initialState = {\n  transactions: []\n};\nexport const GlobalContext = createContext(initialState);\nexport const GlobalProvider = ({\n  children\n}) => {\n  function deleteTransaction(id) {\n    //   type과 payload둘 다 action에 속함. action.type, action.payload 등\n    dispatch({\n      type: \"REMOVE_ITEM\",\n      payload: id\n    });\n  }\n\n  function addTransaction(transaction) {\n    dispatch({\n      type: \"ADD_ITEM\",\n      payload: transaction\n    });\n  }\n\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return /*#__PURE__*/React.createElement(GlobalContext.Provider, {\n    // value 아래에 transactions하고 deleteTransaction pass in 함\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/pjy15/OneDrive/바탕 화면/박준영/Computer/reactexpensetracker/src/context/GlobalState.js"],"names":["React","useReducer","createContext","Reducer","initialState","transactions","GlobalContext","GlobalProvider","children","deleteTransaction","id","dispatch","type","payload","addTransaction","transaction","state"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE;AADK,CAArB;AAIA,OAAO,MAAMC,aAAa,GAAGJ,aAAa,CAACE,YAAD,CAAnC;AAEP,OAAO,MAAMG,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,WAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7B;AACAC,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAEH;AAAhC,KAAD,CAAR;AACD;;AACD,WAASI,cAAT,CAAwBC,WAAxB,EAAqC;AACnCJ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAEE;AAA7B,KAAD,CAAR;AACD;;AACD,QAAM,CAACC,KAAD,EAAQL,QAAR,IAAoBV,UAAU,CAACE,OAAD,EAAUC,YAAV,CAApC;AACA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE;AACA,IAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAEW,KAAK,CAACX,YADf;AAELI,MAAAA,iBAFK;AAGLK,MAAAA;AAHK,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGN,QARH,CADF;AAYD,CArBM","sourcesContent":["// https://css-tricks.com/getting-to-know-the-usereducer-react-hook/\r\n// https://www.robinwieruch.de/react-usecontext-hook\r\n// 간단히 useReducer는 useState처럼 state를 수정함. 다만 단순한 거 말고 복잡한 거 쓸 때 추천. state 요소끼리 연관되어 있을 때\r\n// 간단히 context는 redux와 같은 역할. component 속 여러 component들 옛날처럼 pass in 해서 연결하고 안해도 되게 해줌\r\nimport React, { useReducer, createContext } from \"react\";\r\nimport Reducer from \"./Reducer\";\r\nconst initialState = {\r\n  transactions: [],\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n  function deleteTransaction(id) {\r\n    //   type과 payload둘 다 action에 속함. action.type, action.payload 등\r\n    dispatch({ type: \"REMOVE_ITEM\", payload: id });\r\n  }\r\n  function addTransaction(transaction) {\r\n    dispatch({ type: \"ADD_ITEM\", payload: transaction });\r\n  }\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n  return (\r\n    <GlobalContext.Provider\r\n      // value 아래에 transactions하고 deleteTransaction pass in 함\r\n      value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}